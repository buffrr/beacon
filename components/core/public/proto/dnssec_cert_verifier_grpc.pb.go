// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CertVerifierClient is the client API for CertVerifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CertVerifierClient interface {
	VerifyCert(ctx context.Context, in *CertVerifyRequest, opts ...grpc.CallOption) (*CertVerifyResponse, error)
}

type certVerifierClient struct {
	cc grpc.ClientConnInterface
}

func NewCertVerifierClient(cc grpc.ClientConnInterface) CertVerifierClient {
	return &certVerifierClient{cc}
}

func (c *certVerifierClient) VerifyCert(ctx context.Context, in *CertVerifyRequest, opts ...grpc.CallOption) (*CertVerifyResponse, error) {
	out := new(CertVerifyResponse)
	err := c.cc.Invoke(ctx, "/dnssec_cert_verifier.CertVerifier/VerifyCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertVerifierServer is the server API for CertVerifier service.
// All implementations must embed UnimplementedCertVerifierServer
// for forward compatibility
type CertVerifierServer interface {
	VerifyCert(context.Context, *CertVerifyRequest) (*CertVerifyResponse, error)
	mustEmbedUnimplementedCertVerifierServer()
}

// UnimplementedCertVerifierServer must be embedded to have forward compatible implementations.
type UnimplementedCertVerifierServer struct {
}

func (UnimplementedCertVerifierServer) VerifyCert(context.Context, *CertVerifyRequest) (*CertVerifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCert not implemented")
}
func (UnimplementedCertVerifierServer) mustEmbedUnimplementedCertVerifierServer() {}

// UnsafeCertVerifierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CertVerifierServer will
// result in compilation errors.
type UnsafeCertVerifierServer interface {
	mustEmbedUnimplementedCertVerifierServer()
}

func RegisterCertVerifierServer(s grpc.ServiceRegistrar, srv CertVerifierServer) {
	s.RegisterService(&CertVerifier_ServiceDesc, srv)
}

func _CertVerifier_VerifyCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertVerifierServer).VerifyCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dnssec_cert_verifier.CertVerifier/VerifyCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertVerifierServer).VerifyCert(ctx, req.(*CertVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CertVerifier_ServiceDesc is the grpc.ServiceDesc for CertVerifier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CertVerifier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dnssec_cert_verifier.CertVerifier",
	HandlerType: (*CertVerifierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyCert",
			Handler:    _CertVerifier_VerifyCert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dnssec_cert_verifier.proto",
}
